---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/v1/lists":
    get:
      summary: index
      tags:
      - lists
      security:
      - JWT: []
      responses:
        '200':
          description: return user`s lists
          content:
            application/json:
              schema:
                type: object
                properties:
                  lists:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: Doing
                        n_position:
                          type: integer
                          example: 2
                        tasks:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 1
                              name:
                                type: string
                                example: task 1
                              description:
                                type: string
                                exmaple: abc
                              list_id:
                                type: integer
                                example: 5
                              created_at:
                                type: string
                                example: '2022-06-23T20:40:28.305Z'
                              updated_at:
                                type: string
                                example: '2022-06-23T20:40:28.305Z'
        '403':
          description: header was no sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: authentication header has invalid format
    post:
      summary: create list
      tags:
      - lists
      security:
      - JWT: []
      parameters: []
      responses:
        '201':
          description: return the id of list created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 84
        '422':
          description: invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    example:
                    - N position has already been taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: backlog week 1
                n_position:
                  type: integer
                  example: 4
              required:
              - name
              - n_position
  "/v1/lists/{id}":
    patch:
      summary: update list
      tags:
      - lists
      security:
      - JWT: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: list updated - without response returned
        '401':
          description: list not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: Couldn't find List with 'id'= 123
        '422':
          description: invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    example:
                    - N position has already been taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: backlog week 1
              required:
              - name
    put:
      summary: update list
      tags:
      - lists
      security:
      - JWT: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: list updated - without response returned
        '401':
          description: list not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: Couldn't find List with 'id'= 123
        '422':
          description: invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    example:
                    - N position has already been taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: backlog week 1
              required:
              - name
    delete:
      summary: delete list
      tags:
      - lists
      security:
      - JWT: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: list deleted - without response returned
        '401':
          description: list not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: Couldn't find List with 'id'= 123
  "/v1/signup":
    post:
      summary: signup user
      tags:
      - sessions
      parameters: []
      responses:
        '200':
          description: return a JWT
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiJ9.eyJpZCI6Mn0.VE73XwpT1UCjEsPkb80uphw6Jb7CoHLY720wFBNp618
        '422':
          description: invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    example:
                    - Password can't be blank
                    - First name can't be blank
                    - Last name can't be blank
                    - Email can't be blank
                    - Email is invalid
                    - Password is too short (minimum is 6 characters)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: Jospeh
                last_name:
                  type: syring
                  example: Labadie
                email:
                  type: string
                  example: user@gmail.com
                password:
                  type: string
                  example: '12345678'
              required:
              - first_name
              - last_name
              - email
              - password
  "/v1/login":
    post:
      summary: login user
      tags:
      - sessions
      parameters: []
      responses:
        '200':
          description: return a JWT
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiJ9.eyJpZCI6MX0.ciMZsyguAsDiKAmLXsklm7Xh8-67QKSdixcd3yyboJ0
        '401':
          description: wrong credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: wrong credentials
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@gmail.com
                password:
                  type: string
                  example: '12345678'
              required:
              - email
              - password
  "/v1/tasks":
    post:
      summary: create task
      tags:
      - tasks
      security:
      - JWT: []
      parameters: []
      responses:
        '201':
          description: return the id of task created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 44
        '422':
          description: invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    example:
                    - List must exist
                    - Name can't be blank
                    - List can't be blank
                    - Name the name has specials characters
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: task 1
                description:
                  type: string
                  example: Sequi sit veniam. Eveniet velit non. Tempora consectetur
                    similique.
                list_id:
                  type: integer
                  example: 1
              required:
              - name
              - description
              - list_id
  "/v1/tasks/{id}":
    get:
      summary: show task
      tags:
      - tasks
      security:
      - JWT: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: task returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  task:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      tittle:
                        type: string
                        example: task 1
                      description:
                        type: string
                        exmaple: abc
                      list_id:
                        type: integer
                        example: 5
                      created_at:
                        type: string
                        example: '2022-06-23T20:40:28.305Z'
                      updated_at:
                        type: string
                        example: '2022-06-23T20:40:28.305Z'
        '401':
          description: task not found or doesn`t belong to user logged
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: Couldn't find task with 'id'=123
    patch:
      summary: update task
      tags:
      - tasks
      security:
      - JWT: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: task updated - without response returned
        '401':
          description: task not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: Couldn't find task with 'id'= 123
        '422':
          description: invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    example:
                    - List must exist
                    - Name can't be blank
                    - List can't be blank
                    - Name the name has specials characters
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: task 1
                description:
                  type: string
                  example: Non reprehenderit ex. Suscipit sit dolores. Atque omnis
                    rerum.
                list_id:
                  type: integer
                  example: 3
              required:
              - name
              - description
              - list_id
    put:
      summary: update task
      tags:
      - tasks
      security:
      - JWT: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: task updated - without response returned
        '401':
          description: task not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: Couldn't find task with 'id'= 123
        '422':
          description: invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    example:
                    - List must exist
                    - Name can't be blank
                    - List can't be blank
                    - Name the name has specials characters
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: task 1
                description:
                  type: string
                  example: Sed et dolor. Rerum voluptas itaque. Esse architecto accusamus.
                list_id:
                  type: integer
                  example: 6
              required:
              - name
              - description
              - list_id
    delete:
      summary: delete task
      tags:
      - tasks
      security:
      - JWT: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: task deleted - without response returned
        '401':
          description: task not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: Couldn't find task with 'id'=123
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: localhost:3000/
components:
  securitySchemes:
    JWT:
      type: apiKey
      name: Authorization
      description: User JWT access token
      in: header
